{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Well-Plate Data Generator A CLI tool for generating large volumes of example data, simulating the data that would be read from well-plates during a screening experiment. Contents CLI Usage Implementation Notes Template Files Releases","title":"Well-Plate Data Generator"},{"location":"#well-plate-data-generator","text":"A CLI tool for generating large volumes of example data, simulating the data that would be read from well-plates during a screening experiment.","title":"Well-Plate Data Generator"},{"location":"#contents","text":"CLI Usage Implementation Notes Template Files Releases","title":"Contents"},{"location":"command-line-usage/","text":"Using the CLI Commands Short Flag Long Flag Description Example -h --help Prints a list of commands and their usage -v --version Prints version information about the application -t --template Path to template file used to simulate data -t /Users/henryshakeshaft/Documents/screening-plate-templates/96-lr.tplx -n --num-plates Number of plates to generate -n 100 -e --equation The equation used to simulate data valid values: EC50 , IC50 or XC50 -e EC50 -f --format The output format that generated data should be saved as. Valid formats are csv & tsv -f csv -o --output Path to directory where generated data should be saved -o /Users/henryshakeshaft/Documents/screening-plate-templates/generated-data Examples Generating 20 CSV plates with EC50 shape Unix Windows wellgen -t $HOME /well-gen/templates/96-lr.tplx -n 20 -e EC50 -f csv -o $HOME /well-gen/generated wellgen -t %USERPROFILE%/well-gen/templates/96-lr.tplx -n 20 -e EC50 -f csv -o %USERPROFILE%/well-gen/generated Generating 100,000 1536 well plates with XC50 shapes exported as TSV files Unix Windows wellgen -t $HOME /well-gen/templates/1526-A.tplx -n 100000 -e XC50 -f csv -o $HOME /well-gen/generated wellgen -t %USERPROFILE%/well-gen/templates/1526-A.tplx -n 100000 -e XC50 -f csv -o %USERPROFILE%/well-gen/generated","title":"Using the CLI"},{"location":"command-line-usage/#using-the-cli","text":"","title":"Using the CLI"},{"location":"command-line-usage/#commands","text":"Short Flag Long Flag Description Example -h --help Prints a list of commands and their usage -v --version Prints version information about the application -t --template Path to template file used to simulate data -t /Users/henryshakeshaft/Documents/screening-plate-templates/96-lr.tplx -n --num-plates Number of plates to generate -n 100 -e --equation The equation used to simulate data valid values: EC50 , IC50 or XC50 -e EC50 -f --format The output format that generated data should be saved as. Valid formats are csv & tsv -f csv -o --output Path to directory where generated data should be saved -o /Users/henryshakeshaft/Documents/screening-plate-templates/generated-data","title":"Commands"},{"location":"command-line-usage/#examples","text":"Generating 20 CSV plates with EC50 shape Unix Windows wellgen -t $HOME /well-gen/templates/96-lr.tplx -n 20 -e EC50 -f csv -o $HOME /well-gen/generated wellgen -t %USERPROFILE%/well-gen/templates/96-lr.tplx -n 20 -e EC50 -f csv -o %USERPROFILE%/well-gen/generated Generating 100,000 1536 well plates with XC50 shapes exported as TSV files Unix Windows wellgen -t $HOME /well-gen/templates/1526-A.tplx -n 100000 -e XC50 -f csv -o $HOME /well-gen/generated wellgen -t %USERPROFILE%/well-gen/templates/1526-A.tplx -n 100000 -e XC50 -f csv -o %USERPROFILE%/well-gen/generated","title":"Examples"},{"location":"implementation-notes/","text":"Implementation Details on how the application internals function.","title":"Implementation"},{"location":"implementation-notes/#implementation","text":"Details on how the application internals function.","title":"Implementation"},{"location":"implementation-notes/internals/","text":"Abstract This page contains details on how different parts of the application work, on a high level. This includes how the CLI passes args and how tempalte files are parsed. Arg parsing graph LR A[Start] --> B[Pass CLI Args]; B --> C{Was help flag used?}; C --> |Yes| D[Print Help]; C --> |No| E{Was version flag used?}; E --> |Yes| F[Print Version information]; E --> |No| G{Are all flags valid?}; G --> |Yes| H{Are all args associated with each flag valid?}; H --> |Yes| I[Generate Files]; H --> |No| K; G --> |No| K[Exit with error]; Parsing Template File flowchart LR subgraph parse_file direction LR a1[Start] --> b1{Does file exist?}; b1 --> |No| c1[Exit with error]; b1 --> |Yes| d1[Parse first 3 lines]; d1 --> e1[Parse Plate Declaration Block]; e1 --> f1[Parse Data Block]; f1 --> g1[Create deserialised instance of template]; g1 --> h1[End]; end subgraph parse_first_3_lines end subgraph parse_plate_declaration_block end subgraph parse_data_block end d1 ==> parse_first_3_lines; parse_first_3_lines ==> d1; e1 ==> parse_plate_declaration_block; parse_plate_declaration_block ==> e1; f1 ==> parse_data_block; parse_data_block ==> f1; Note whilst parsing each line of the file a check is performed to see if there is a blank line; if there is, then an error is thrown. Note Below are the expanded flow diagrams for each linked step. parse_first_3_lines flowchart TB a2[Start] --> b2{Is version valid?}; b2 --> |No| c2{Is there a comment line?}; b2 --> |Yes| d2[Exit with error]; c2 --> |No| d2; c2 --> |Yes| e2{Is the comment line more than 1 line?}; e2 --> |Yes| d2; e2 --> |No| f2{Is there a Format Declaration Line?}; f2 --> |No| d2; f2 --> |Yes| a3{Is Is there a col number, row number and directionality?}; subgraph parse_format_declaration direction LR a3 --> b3{Are the col and row numbers positive?}; b3 --> |No| d2; b3 --> |Yes| c3{Are they integers?}; c3 --> |No| d2; c3 --> |Yes| d3{Is the directionality valid?}; d3 --> |No| d2; end d3 --> |Yes| g2[End]; parse_plate_declaration_block flowchart LR a4[Start] --> b4{Are there any invalid well types?}; b4 --> |Yes| c4[Exit with error]; b4 --> |No| d4[End]; parse_data_block flowchart TB subgraph parse_data_block direction TB a5[Start] --> b5{End of Block?} b5 --> |No| c5[Fetch line]; b5 --> |Yes| d5[End]; c5 --> e5{Sample or Control}; e5 --> |Sample| a6{Is sample undeclared?}; e5 --> |Control| a7{Is control undeclared?}; f5[Exit with error]; subgraph parse_sample a6; a6 --> |No| b6{Does sample contain NA for a value?}; b6 --> |No| c6{Are the values floats?}; c6 --> |No| d6{Are the values ints?}; d6 --> |Yes| e6{Store data}; c6 --> |Yes| e6; end %% exit conditions for samples a6 --> |Yes| f5; b6 --> |Yes| f5; d6 --> |No| f5; subgraph parse_control a7; a7 --> |No| b7{Does control contain NA for a value?}; a7 --> |Yes| c7[Skip]; b7 --> |No| d7{Is value a float?}; d7 --> |No| e7{Is value an int?}; e7 --> |Yes| f7[Store value]; d7 --> |Yes| f7; end %% exit conditions for controls b7 --> |Yes| f5; e7 --> |No| f5; e6 --> b5; c7 --> b5; f7 --> b5; end Generating Data","title":"Internals"},{"location":"implementation-notes/internals/#arg-parsing","text":"graph LR A[Start] --> B[Pass CLI Args]; B --> C{Was help flag used?}; C --> |Yes| D[Print Help]; C --> |No| E{Was version flag used?}; E --> |Yes| F[Print Version information]; E --> |No| G{Are all flags valid?}; G --> |Yes| H{Are all args associated with each flag valid?}; H --> |Yes| I[Generate Files]; H --> |No| K; G --> |No| K[Exit with error];","title":"Arg parsing"},{"location":"implementation-notes/internals/#parsing-template-file","text":"flowchart LR subgraph parse_file direction LR a1[Start] --> b1{Does file exist?}; b1 --> |No| c1[Exit with error]; b1 --> |Yes| d1[Parse first 3 lines]; d1 --> e1[Parse Plate Declaration Block]; e1 --> f1[Parse Data Block]; f1 --> g1[Create deserialised instance of template]; g1 --> h1[End]; end subgraph parse_first_3_lines end subgraph parse_plate_declaration_block end subgraph parse_data_block end d1 ==> parse_first_3_lines; parse_first_3_lines ==> d1; e1 ==> parse_plate_declaration_block; parse_plate_declaration_block ==> e1; f1 ==> parse_data_block; parse_data_block ==> f1; Note whilst parsing each line of the file a check is performed to see if there is a blank line; if there is, then an error is thrown. Note Below are the expanded flow diagrams for each linked step. parse_first_3_lines flowchart TB a2[Start] --> b2{Is version valid?}; b2 --> |No| c2{Is there a comment line?}; b2 --> |Yes| d2[Exit with error]; c2 --> |No| d2; c2 --> |Yes| e2{Is the comment line more than 1 line?}; e2 --> |Yes| d2; e2 --> |No| f2{Is there a Format Declaration Line?}; f2 --> |No| d2; f2 --> |Yes| a3{Is Is there a col number, row number and directionality?}; subgraph parse_format_declaration direction LR a3 --> b3{Are the col and row numbers positive?}; b3 --> |No| d2; b3 --> |Yes| c3{Are they integers?}; c3 --> |No| d2; c3 --> |Yes| d3{Is the directionality valid?}; d3 --> |No| d2; end d3 --> |Yes| g2[End]; parse_plate_declaration_block flowchart LR a4[Start] --> b4{Are there any invalid well types?}; b4 --> |Yes| c4[Exit with error]; b4 --> |No| d4[End]; parse_data_block flowchart TB subgraph parse_data_block direction TB a5[Start] --> b5{End of Block?} b5 --> |No| c5[Fetch line]; b5 --> |Yes| d5[End]; c5 --> e5{Sample or Control}; e5 --> |Sample| a6{Is sample undeclared?}; e5 --> |Control| a7{Is control undeclared?}; f5[Exit with error]; subgraph parse_sample a6; a6 --> |No| b6{Does sample contain NA for a value?}; b6 --> |No| c6{Are the values floats?}; c6 --> |No| d6{Are the values ints?}; d6 --> |Yes| e6{Store data}; c6 --> |Yes| e6; end %% exit conditions for samples a6 --> |Yes| f5; b6 --> |Yes| f5; d6 --> |No| f5; subgraph parse_control a7; a7 --> |No| b7{Does control contain NA for a value?}; a7 --> |Yes| c7[Skip]; b7 --> |No| d7{Is value a float?}; d7 --> |No| e7{Is value an int?}; e7 --> |Yes| f7[Store value]; d7 --> |Yes| f7; end %% exit conditions for controls b7 --> |Yes| f5; e7 --> |No| f5; e6 --> b5; c7 --> b5; f7 --> b5; end","title":"Parsing Template File"},{"location":"implementation-notes/internals/#generating-data","text":"","title":"Generating Data"},{"location":"implementation-notes/maths/","text":"Abstract Explanation of how the numbers are actually generated whilst simulating well plates. The application simulates reads according to a sigmoidal curve function such that a well ( \\(x\\) ) with some concentration $$ f(x) = \\frac{1}{1 + e^{-x}} $$ Internally this is represented as $$ f(x) = \\frac{A}{B + e^{-x}}, A \\in \\mathbb{R}, B \\in \\mathbb{R} $$ Currently this is $$ A = 1, B = 1 $$ After \\(f(x)\\) is applied, this value is taken and 'fuzzed' by adding a value generated according to a normal distribution such that $$ g(x) = f(x) + \\chi $$ where $$ \\chi \\in \\mathcal{N}(\\mu, \\sigma^{2}), \\mu = 0.5, \\sigma = 0.3 $$","title":"Maths"},{"location":"template-file/","text":"Template Files The section will go over how to use and create template files for generating data. Generating Files Unless your template is of simple format, it is recommended that you do not generate these files manually. There is a web tool that allows for eaier creation and previewing of template files, available here File Format Examples","title":"Template Files"},{"location":"template-file/#template-files","text":"The section will go over how to use and create template files for generating data. Generating Files Unless your template is of simple format, it is recommended that you do not generate these files manually. There is a web tool that allows for eaier creation and previewing of template files, available here File Format Examples","title":"Template Files"},{"location":"template-file/format/","text":"Tempalte File Format Intro In order to facilitate greater flexibility in using the software, a file format for describing the data that a user wants to simulate in any format desired. Basics The file comprises several fixed blocks, and several sections of free definition. Files all have the .tplx extension Example 96-well-lr.tplx Version Line This line is used to describe the version of the file - currently there is only 1 version, v1 . Example v1 Description line This line is used to contain a summary of the template file. Example # This is a 96-well plate, containing 2 distinct samples with dilution schemes running from Left to Right Danger the comment can only span 1 line; wrapping the line manually is not allowed. Note the line must be prefixed with a pound sign ( # ). Format Declaration Line This line contains information describing the dimensions of the plate and the directionality (what direction across the plate) of the dilution scheme. Example 12 8 LR Warning rows and cols must be positive, non-zero integers Info the line must be laid out in the following way: <cols> <rows> <directionality> valid values for directionality the following values are valid for directionality : LR : meaning from Left to Right (top to bottom), wherein each new row marks a new sample run TB : meaning from Top to Bottom (left to right), wherein each new col marks a new sample run Plate Declaration Block This is a more free form section, describing the contents of the plate format - i.e. how many samples, where are they on the plate, the position of controls and blanks etc. Example (for a plate of dimensions 7x2 with directionality LR ): Example s1,s,s,s,s,hc,lc s2,s,s,s,s,lc,hc This means that: there are 2 distinct samples ( s1 & s2 ) with corresponding dilution schemes flowing from the left most column to the right most and that each row of the plate contains a high control ( hc ) and a low control ( lc ). Warning the number of rows and columns must match that declared in the Format Declaration Line , or else an error will be thrown whilst the file is parsed Warning directionality must be one of the valid values provided, else an error will be thrown whilst the file is parsed valid well types the set of valid well types are: sx : the initial sample in a dilution scheme; is numbered (e.g. s1 , s2 , ..., s400 , ..., sx ) s : a sample in a dilution scheme hc : a high control well lc : a low control well pc : a positive control well hc : a blank well Data Block The data block contains information on how to populate the plate with actual numeric data; these data are used as the initial concentration values from which simulated data is derived. Example (for a plate of dimensions 7x2 with directionality LR ): Plate Declaration block & Data Block s1,s,s,s,s,hc,lc s2,s,s,s,s,lc,hc >>s1 10 10 >>s2 10 2 >>hc 10 >>lc 10 Tip all well-types described in the plate declaration block are valid here, except s (samples) Danger if a well type is both present in the plate declaration block and data block , but is declared with NA then an error will be thrown Note each sx declared in the plate declaration block must be defined in the data block using NA values correctly well types that are not present in the plate declaration block can be declared here, but must be given a value of NA sample ( sx ) data format the format for each sx here is sx <initial concentration> <dilution factor> e.g. s1 10 3 means each s1 in the plate will be replaced with the value 10 each sample ( s ) in a dilution scheme will be a 3-fold dilution (10, 3.3, 1.1, ...) other well type data format other well types follow this scheme instead: hc <concentration> hc can be replaced with lc , pc or bl","title":"Tempalte File Format"},{"location":"template-file/format/#tempalte-file-format","text":"","title":"Tempalte File Format"},{"location":"template-file/format/#intro","text":"In order to facilitate greater flexibility in using the software, a file format for describing the data that a user wants to simulate in any format desired.","title":"Intro"},{"location":"template-file/format/#basics","text":"The file comprises several fixed blocks, and several sections of free definition. Files all have the .tplx extension Example 96-well-lr.tplx","title":"Basics"},{"location":"template-file/format/#version-line","text":"This line is used to describe the version of the file - currently there is only 1 version, v1 . Example v1","title":"Version Line"},{"location":"template-file/format/#description-line","text":"This line is used to contain a summary of the template file. Example # This is a 96-well plate, containing 2 distinct samples with dilution schemes running from Left to Right Danger the comment can only span 1 line; wrapping the line manually is not allowed. Note the line must be prefixed with a pound sign ( # ).","title":"Description line"},{"location":"template-file/format/#format-declaration-line","text":"This line contains information describing the dimensions of the plate and the directionality (what direction across the plate) of the dilution scheme. Example 12 8 LR Warning rows and cols must be positive, non-zero integers Info the line must be laid out in the following way: <cols> <rows> <directionality> valid values for directionality the following values are valid for directionality : LR : meaning from Left to Right (top to bottom), wherein each new row marks a new sample run TB : meaning from Top to Bottom (left to right), wherein each new col marks a new sample run","title":"Format Declaration Line"},{"location":"template-file/format/#plate-declaration-block","text":"This is a more free form section, describing the contents of the plate format - i.e. how many samples, where are they on the plate, the position of controls and blanks etc. Example (for a plate of dimensions 7x2 with directionality LR ): Example s1,s,s,s,s,hc,lc s2,s,s,s,s,lc,hc This means that: there are 2 distinct samples ( s1 & s2 ) with corresponding dilution schemes flowing from the left most column to the right most and that each row of the plate contains a high control ( hc ) and a low control ( lc ). Warning the number of rows and columns must match that declared in the Format Declaration Line , or else an error will be thrown whilst the file is parsed Warning directionality must be one of the valid values provided, else an error will be thrown whilst the file is parsed valid well types the set of valid well types are: sx : the initial sample in a dilution scheme; is numbered (e.g. s1 , s2 , ..., s400 , ..., sx ) s : a sample in a dilution scheme hc : a high control well lc : a low control well pc : a positive control well hc : a blank well","title":"Plate Declaration Block"},{"location":"template-file/format/#data-block","text":"The data block contains information on how to populate the plate with actual numeric data; these data are used as the initial concentration values from which simulated data is derived. Example (for a plate of dimensions 7x2 with directionality LR ): Plate Declaration block & Data Block s1,s,s,s,s,hc,lc s2,s,s,s,s,lc,hc >>s1 10 10 >>s2 10 2 >>hc 10 >>lc 10 Tip all well-types described in the plate declaration block are valid here, except s (samples) Danger if a well type is both present in the plate declaration block and data block , but is declared with NA then an error will be thrown Note each sx declared in the plate declaration block must be defined in the data block using NA values correctly well types that are not present in the plate declaration block can be declared here, but must be given a value of NA sample ( sx ) data format the format for each sx here is sx <initial concentration> <dilution factor> e.g. s1 10 3 means each s1 in the plate will be replaced with the value 10 each sample ( s ) in a dilution scheme will be a 3-fold dilution (10, 3.3, 1.1, ...) other well type data format other well types follow this scheme instead: hc <concentration> hc can be replaced with lc , pc or bl","title":"Data Block"},{"location":"template-file/plate-examples/","text":"Template File Examples This page contains some examples of both valid and invalid file formats, with reasons for invalidity. Valid Formats 96-well plate containing 1 sample type and a Left to right dilution scheme v1 # 96-well plate with Left->Right dilution scheme 12 8 LR s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl >>s1 10 10 >>hc 10 >>lc 10 >>bl 0 96-well plate with Top to Bottom dilution scheme v1 # 96-well plate with a dilution scheme flowing L->R 12 8 TB s1,s1,s1,s1,s1,s1,s1,s1,s1,s1,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc >>s1 10 10 >>hc 10 >>lc 10 96-well plate containing 1 sample type and a Left to Right dilution scheme where multiple dilution schemes are present per line v1 # 96-well plate with Left->Right dilution scheme 12 8 LR s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl >>s1 10 10 >>hc 10 >>lc 10 >>bl 0 Invalid Formats Invalid Version v6 # 96-well plate with a dilution scheme flowing L->R 5 1 LR s1,s,s,hc,lc >>s1 10 10 >>hc 10 >>lc 10 Danger (currently) the only valid version is v1 File where dimensions declared in the format block and used in the declaration block mismatch v1 # 96-well plate with a dilution scheme flowing L->R 5 1 LR s1,s,s,hc,lc,bl >>s1 10 10 >>hc 10 >>lc 10 >>bl 0 Danger number of cols declared to be 5, but actually got 6 Declared sample is initialised with NA values v1 # 96-well plate with a dilution scheme flowing L->R 5 2 LR s1,s,s,hc,lc s2,s,s,lc,hc >>s1 NA 10 >>s2 10 NA >>hc 10 >>lc 10 >>bl 0 Danger s1 , the initial concentration is not declared as a valid number s2 , the dilution factor is not declared as a valid number","title":"Template File Examples"},{"location":"template-file/plate-examples/#template-file-examples","text":"This page contains some examples of both valid and invalid file formats, with reasons for invalidity.","title":"Template File Examples"},{"location":"template-file/plate-examples/#valid-formats","text":"96-well plate containing 1 sample type and a Left to right dilution scheme v1 # 96-well plate with Left->Right dilution scheme 12 8 LR s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,hc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl s1,s,s,s,s,s,s,s,s,s,lc,bl >>s1 10 10 >>hc 10 >>lc 10 >>bl 0 96-well plate with Top to Bottom dilution scheme v1 # 96-well plate with a dilution scheme flowing L->R 12 8 TB s1,s1,s1,s1,s1,s1,s1,s1,s1,s1,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc s,s,s,s,s,s,s,s,s,s,hc,lc >>s1 10 10 >>hc 10 >>lc 10 96-well plate containing 1 sample type and a Left to Right dilution scheme where multiple dilution schemes are present per line v1 # 96-well plate with Left->Right dilution scheme 12 8 LR s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,hc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl s1,s,s,s,s,s1,s,s,s,s,lc,bl >>s1 10 10 >>hc 10 >>lc 10 >>bl 0","title":"Valid Formats"},{"location":"template-file/plate-examples/#invalid-formats","text":"Invalid Version v6 # 96-well plate with a dilution scheme flowing L->R 5 1 LR s1,s,s,hc,lc >>s1 10 10 >>hc 10 >>lc 10 Danger (currently) the only valid version is v1 File where dimensions declared in the format block and used in the declaration block mismatch v1 # 96-well plate with a dilution scheme flowing L->R 5 1 LR s1,s,s,hc,lc,bl >>s1 10 10 >>hc 10 >>lc 10 >>bl 0 Danger number of cols declared to be 5, but actually got 6 Declared sample is initialised with NA values v1 # 96-well plate with a dilution scheme flowing L->R 5 2 LR s1,s,s,hc,lc s2,s,s,lc,hc >>s1 NA 10 >>s2 10 NA >>hc 10 >>lc 10 >>bl 0 Danger s1 , the initial concentration is not declared as a valid number s2 , the dilution factor is not declared as a valid number","title":"Invalid Formats"}]}